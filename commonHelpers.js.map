{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateInput = document.querySelector('#datetime-picker');\nconst btnStart = document.querySelector('[data-start]');\n\nconst dataHours = document.querySelector('[data-hours]');\nconst dataMinutes = document.querySelector('[data-minutes]');\nconst dataSeconds = document.querySelector('[data-seconds]');\nconst dataDays = document.querySelector('[data-days]');\n\nlet userSelected = null;\nlet timerId = null;\n\nbtnStart.disabled = true;\n\nbtnStart.addEventListener('click', () => {\n  btnStart.disabled = true;\n  dateInput.disabled = true;\n\n  timerId = setInterval(() => {    \n    const timer = new Date(dateInput.value) - Date.now();\n    if (timer<= 0) {\n      clearInterval(timerId);\n      timeOutput({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      btnStart.disabled = false;\n      dateInput.disabled = false;\n      return;\n    }\n    \n    timeOutput(convertMs(timer));\n  }, 1000);\n});\n\nconst timeOutput = ({ days, hours, minutes, seconds }) => {\n  dataDays.textContent =  String(days).padStart(2, '0');\n  dataHours.textContent = String(hours).padStart(2, '0');\n  dataMinutes.textContent = String(minutes).padStart(2, '0');\n  dataSeconds.textContent = String(seconds).padStart(2, '0');\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelected = selectedDates[0];\n    const currentDate = Date.now();\n\n    if (userSelected <= currentDate) {\n      btnStart.disabled = true;\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        color: '#EF4040',\n        messageColor: '#fff',\n      });\n    } else {\n      btnStart.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);"],"names":["dateInput","btnStart","dataHours","dataMinutes","dataSeconds","dataDays","userSelected","timerId","timer","timeOutput","convertMs","days","hours","minutes","seconds","ms","options","selectedDates","currentDate","iziToast","flatpickr"],"mappings":"sGAMA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,cAAc,EAEhDC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAW,SAAS,cAAc,aAAa,EAErD,IAAIC,EAAe,KACfC,EAAU,KAEdN,EAAS,SAAW,GAEpBA,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBD,EAAU,SAAW,GAErBO,EAAU,YAAY,IAAM,CAC1B,MAAMC,EAAQ,IAAI,KAAKR,EAAU,KAAK,EAAI,KAAK,MAC/C,GAAIQ,GAAQ,EAAG,CACb,cAAcD,CAAO,EACrBE,EAAW,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACxDR,EAAS,SAAW,GACpBD,EAAU,SAAW,GACrB,MACD,CAEDS,EAAWC,EAAUF,CAAK,CAAC,CAC5B,EAAE,GAAI,CACT,CAAC,EAED,MAAMC,EAAa,CAAC,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,IAAO,CACxDT,EAAS,YAAe,OAAOM,CAAI,EAAE,SAAS,EAAG,GAAG,EACpDT,EAAU,YAAc,OAAOU,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDT,EAAY,YAAc,OAAOU,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDT,EAAY,YAAc,OAAOU,CAAO,EAAE,SAAS,EAAG,GAAG,CAC3D,EAEA,SAASJ,EAAUK,EAAI,CAMrB,MAAMJ,EAAO,KAAK,MAAMI,EAAK,KAAG,EAC1BH,EAAQ,KAAK,MAAOG,EAAK,MAAO,IAAI,EACpCF,EAAU,KAAK,MAAQE,EAAK,MAAO,KAAQ,GAAM,EACjDD,EAAU,KAAK,MAASC,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBX,EAAeW,EAAc,CAAC,EAC9B,MAAMC,EAAc,KAAK,MAErBZ,GAAgBY,GAClBjB,EAAS,SAAW,GACpBkB,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,WACV,MAAO,UACP,aAAc,MACtB,CAAO,GAEDlB,EAAS,SAAW,EAEvB,CACH,EAEAmB,EAAU,mBAAoBJ,CAAO"}